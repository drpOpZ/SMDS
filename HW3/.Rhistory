xlab=expression(lambda), ylab="", col="blue", lwd=2, add=T)
#true lambda
lambda <- 2
#sample size
n <- 15
#prior alpha
alpha <- 4
#prior beta
beta <- 2
#generate the data
set.seed(123)
y <- rpois(n,lambda)
#posterior alpha
alpha_star <- sum(y)+alpha
#posterior beta
beta_star <- n+beta
plot(function(x) (exp(-n*x)* x^(sum(y))/(prod(factorial(y)))), from=0,to=10, lty=2, lwd=1, col="black",
ylab="density" ,ylim=c(0,5) , xlab=expression(lambda))
curve(dgamma(x, alpha, beta), xlim=c(0,10), col="red", lty=1,lwd=2,  add =T)
curve(dgamma(x, alpha_star, beta_star),
xlab=expression(lambda), ylab="", col="blue", lwd=2, add=T)
#true lambda
lambda <- 2
#sample size
n <- 15
#prior alpha
alpha <- 4
#prior beta
beta <- 2
#generate the data
set.seed(123)
y <- rpois(n,lambda)
#posterior alpha
alpha_star <- sum(y)+alpha
#posterior beta
beta_star <- n+beta
plot(function(x) prod(exp(-x) x^(y) 1/(factorial(y)), from=0,to=10, lty=2, lwd=1, col="black",
ylab="density" ,ylim=c(0,5) , xlab=expression(lambda))
curve(dgamma(x, alpha, beta), xlim=c(0,10), col="red", lty=1,lwd=2,  add =T)
curve(dgamma(x, alpha_star, beta_star),
xlab=expression(lambda), ylab="", col="blue", lwd=2, add=T)
#true lambda
lambda <- 2
#sample size
n <- 15
#prior alpha
alpha <- 4
#prior beta
beta <- 2
#generate the data
set.seed(123)
y <- rpois(n,lambda)
#posterior alpha
alpha_star <- sum(y)+alpha
#posterior beta
beta_star <- n+beta
plot(function(x) prod(exp(-x) * x^(y) * 1/(factorial(y)), from=0,to=10, lty=2, lwd=1, col="black",
ylab="density" ,ylim=c(0,5) , xlab=expression(lambda))
curve(dgamma(x, alpha, beta), xlim=c(0,10), col="red", lty=1,lwd=2,  add =T)
curve(dgamma(x, alpha_star, beta_star),
xlab=expression(lambda), ylab="", col="blue", lwd=2, add=T)
#true lambda
lambda <- 2
#sample size
n <- 15
#prior alpha
alpha <- 4
#prior beta
beta <- 2
#generate the data
set.seed(123)
y <- rpois(n,lambda)
#posterior alpha
alpha_star <- sum(y)+alpha
#posterior beta
beta_star <- n+beta
plot(function(x) prod(exp(-x) * x^(y) * 1/(factorial(y))), from=0,to=10, lty=2, lwd=1, col="black",
ylab="density" ,ylim=c(0,5) , xlab=expression(lambda))
curve(dgamma(x, alpha, beta), xlim=c(0,10), col="red", lty=1,lwd=2,  add =T)
curve(dgamma(x, alpha_star, beta_star),
xlab=expression(lambda), ylab="", col="blue", lwd=2, add=T)
#true lambda
lambda <- 2
#sample size
n <- 15
#prior alpha
alpha <- 4
#prior beta
beta <- 2
#generate the data
set.seed(123)
y <- rpois(n,lambda)
#posterior alpha
alpha_star <- sum(y)+alpha
#posterior beta
beta_star <- n+beta
plot(function(x) -nx-sum(lfactorial(y))+sum(y*log(x)), from=0,to=10, lty=2, lwd=1, col="black",
ylab="density" ,ylim=c(0,5) , xlab=expression(lambda))
curve(dgamma(x, alpha, beta), xlim=c(0,10), col="red", lty=1,lwd=2,  add =T)
curve(dgamma(x, alpha_star, beta_star),
xlab=expression(lambda), ylab="", col="blue", lwd=2, add=T)
#true lambda
lambda <- 2
#sample size
n <- 15
#prior alpha
alpha <- 4
#prior beta
beta <- 2
#generate the data
set.seed(123)
y <- rpois(n,lambda)
#posterior alpha
alpha_star <- sum(y)+alpha
#posterior beta
beta_star <- n+beta
plot(function(x) -n*x-sum(lfactorial(y))+sum(y*log(x)), from=0,to=10, lty=2, lwd=1, col="black",
ylab="density" ,ylim=c(0,5) , xlab=expression(lambda))
curve(dgamma(x, alpha, beta), xlim=c(0,10), col="red", lty=1,lwd=2,  add =T)
curve(dgamma(x, alpha_star, beta_star),
xlab=expression(lambda), ylab="", col="blue", lwd=2, add=T)
#true lambda
lambda <- 2
#sample size
n <- 15
#prior alpha
alpha <- 4
#prior beta
beta <- 2
#generate the data
set.seed(123)
y <- rpois(n,lambda)
#posterior alpha
alpha_star <- sum(y)+alpha
#posterior beta
beta_star <- n+beta
plot(function(x) exp(-n*x-sum(lfactorial(y))+sum(y*log(x))), from=0,to=10, lty=2, lwd=1, col="black",
ylab="density" ,ylim=c(0,5) , xlab=expression(lambda))
curve(dgamma(x, alpha, beta), xlim=c(0,10), col="red", lty=1,lwd=2,  add =T)
curve(dgamma(x, alpha_star, beta_star),
xlab=expression(lambda), ylab="", col="blue", lwd=2, add=T)
#true lambda
lambda <- 2
#sample size
n <- 15
#prior alpha
alpha <- 4
#prior beta
beta <- 2
#generate the data
set.seed(123)
y <- rpois(n,lambda)
#posterior alpha
alpha_star <- sum(y)+alpha
#posterior beta
beta_star <- n+beta
plot(function(x) exp(-n*x-sum(lfactorial(y))+log(x)*sum(y)), from=0,to=10, lty=2, lwd=1, col="black",
ylab="density" ,ylim=c(0,5) , xlab=expression(lambda))
curve(dgamma(x, alpha, beta), xlim=c(0,10), col="red", lty=1,lwd=2,  add =T)
curve(dgamma(x, alpha_star, beta_star),
xlab=expression(lambda), ylab="", col="blue", lwd=2, add=T)
#true lambda
lambda <- 2
#sample size
n <- 15
#prior alpha
alpha <- 4
#prior beta
beta <- 2
#generate the data
set.seed(123)
y <- rpois(n,lambda)
#posterior alpha
alpha_star <- sum(y)+alpha
#posterior beta
beta_star <- n+beta
plot(function(x) exp(-n*x-sum(lfactorial(y))+log(x)*sum(y)), from=-100,to=100, lty=2, lwd=1, col="black",
ylab="density" ,ylim=c(-5,5) , xlab=expression(lambda))
curve(dgamma(x, alpha, beta), xlim=c(0,10), col="red", lty=1,lwd=2,  add =T)
curve(dgamma(x, alpha_star, beta_star),
xlab=expression(lambda), ylab="", col="blue", lwd=2, add=T)
#true lambda
lambda <- 2
#sample size
n <- 15
#prior alpha
alpha <- 4
#prior beta
beta <- 2
#generate the data
set.seed(123)
y <- rpois(n,lambda)
#posterior alpha
alpha_star <- sum(y)+alpha
#posterior beta
beta_star <- n+beta
plot(function(x) exp(-n*x-sum(lfactorial(y))+log(x)*sum(y)), from=-100,to=100, lty=2, lwd=1, col="black",
ylab="density" ,ylim=c(-5,5) , xlab=expression(lambda))
#true lambda
lambda <- 2
#sample size
n <- 15
#prior alpha
alpha <- 4
#prior beta
beta <- 2
#generate the data
set.seed(123)
y <- rpois(n,lambda)
#posterior alpha
alpha_star <- sum(y)+alpha
#posterior beta
beta_star <- n+beta
plot(function(x) exp(-n*x-sum(lfactorial(y))+log(x)*sum(y)), from=0,to=10, lty=2, lwd=1, col="black",
ylab="density" ,ylim=c(0,5) , xlab=expression(lambda))
curve(dgamma(x, alpha, beta), xlim=c(0,10), col="red", lty=1,lwd=2,  add =T)
curve(dgamma(x, alpha_star, beta_star),
xlab=expression(lambda), ylab="", col="blue", lwd=2, add=T)
#true lambda
lambda <- 2
#sample size
n <- 15
#prior alpha
alpha <- 4
#prior beta
beta <- 2
#generate the data
set.seed(123)
y <- rpois(n,lambda)
#posterior alpha
alpha_star <- sum(y)+alpha
#posterior beta
beta_star <- n+beta
plot(function(x) prod(exp(-x) * x^(y), from=0,to=10, lty=2, lwd=1, col="black",
ylab="density" ,ylim=c(0,5) , xlab=expression(lambda))
curve(dgamma(x, alpha, beta), xlim=c(0,10), col="red", lty=1,lwd=2,  add =T)
curve(dgamma(x, alpha_star, beta_star),
xlab=expression(lambda), ylab="", col="blue", lwd=2, add=T)
#true lambda
lambda <- 2
#sample size
n <- 15
#prior alpha
alpha <- 4
#prior beta
beta <- 2
#generate the data
set.seed(123)
y <- rpois(n,lambda)
#posterior alpha
alpha_star <- sum(y)+alpha
#posterior beta
beta_star <- n+beta
plot(function(x) prod(exp(-x) * x^(y)), from=0,to=10, lty=2, lwd=1, col="black",
ylab="density" ,ylim=c(0,5) , xlab=expression(lambda))
curve(dgamma(x, alpha, beta), xlim=c(0,10), col="red", lty=1,lwd=2,  add =T)
curve(dgamma(x, alpha_star, beta_star),
xlab=expression(lambda), ylab="", col="blue", lwd=2, add=T)
#true lambda
lambda <- 2
#sample size
n <- 15
#prior alpha
alpha <- 4
#prior beta
beta <- 2
#generate the data
set.seed(123)
y <- rpois(n,lambda)
#posterior alpha
alpha_star <- sum(y)+alpha
#posterior beta
beta_star <- n+beta
plot(function(x) (exp(-n*x) * x^(sum(y))), from=0,to=10, lty=2, lwd=1, col="black",
ylab="density" ,ylim=c(0,5) , xlab=expression(lambda))
curve(dgamma(x, alpha, beta), xlim=c(0,10), col="red", lty=1,lwd=2,  add =T)
curve(dgamma(x, alpha_star, beta_star),
xlab=expression(lambda), ylab="", col="blue", lwd=2, add=T)
#true lambda
lambda <- 2
#sample size
n <- 15
#prior alpha
alpha <- 4
#prior beta
beta <- 2
#generate the data
set.seed(123)
y <- rpois(n,lambda)
#posterior alpha
alpha_star <- sum(y)+alpha
#posterior beta
beta_star <- n+beta
plot(function(x) x^(sum(y))), from=0,to=10, lty=2, lwd=1, col="black",
ylab="density" ,ylim=c(0,5) , xlab=expression(lambda))
curve(dgamma(x, alpha, beta), xlim=c(0,10), col="red", lty=1,lwd=2,  add =T)
curve(dgamma(x, alpha_star, beta_star),
xlab=expression(lambda), ylab="", col="blue", lwd=2, add=T)
#true lambda
lambda <- 2
#sample size
n <- 15
#prior alpha
alpha <- 4
#prior beta
beta <- 2
#generate the data
set.seed(123)
y <- rpois(n,lambda)
#posterior alpha
alpha_star <- sum(y)+alpha
#posterior beta
beta_star <- n+beta
plot(function(x) x^(sum(y)), from=0,to=10, lty=2, lwd=1, col="black",
ylab="density" ,ylim=c(0,5) , xlab=expression(lambda))
curve(dgamma(x, alpha, beta), xlim=c(0,10), col="red", lty=1,lwd=2,  add =T)
curve(dgamma(x, alpha_star, beta_star),
xlab=expression(lambda), ylab="", col="blue", lwd=2, add=T)
#true lambda
lambda <- 2
#sample size
n <- 15
#prior alpha
alpha <- 4
#prior beta
beta <- 2
#generate the data
set.seed(123)
y <- rpois(n,lambda)
#posterior alpha
alpha_star <- sum(y)+alpha
#posterior beta
beta_star <- n+beta
plot(function(x) x^(sum(y)), from=0,to=6, lty=2, lwd=1, col="black",
ylab="density" ,ylim=c(0,5) , xlab=expression(lambda))
curve(dgamma(x, alpha, beta), xlim=c(0,6), col="red", lty=1,lwd=2,  add =T)
curve(dgamma(x, alpha_star, beta_star),
xlab=expression(lambda), ylab="", col="blue", lwd=2, add=T)
#true lambda
lambda <- 2
#sample size
n <- 15
#prior alpha
alpha <- 4
#prior beta
beta <- 2
#generate the data
set.seed(123)
y <- rpois(n,lambda)
#posterior alpha
alpha_star <- sum(y)+alpha
#posterior beta
beta_star <- n+beta
plot(function(x) (x^(sum(y)))*(exp(-n*x)), from=0,to=6, lty=2, lwd=1, col="black",
ylab="density" ,ylim=c(0,5) , xlab=expression(lambda))
curve(dgamma(x, alpha, beta), xlim=c(0,6), col="red", lty=1,lwd=2,  add =T)
curve(dgamma(x, alpha_star, beta_star),
xlab=expression(lambda), ylab="", col="blue", lwd=2, add=T)
remove.packages("rstan")
if (file.exists(".RData")) file.remove(".RData")
library("bayesplot")
library("rstanarm")
library("ggplot2")
library("rstan")
#input values
#true mean
theta_sample <- 2
#likelihood variance
sigma2 <- 2
#sample size
n <- 10
#generate some data
set.seed(123)
y <- rnorm(n,theta_sample, sqrt(sigma2))
#launch biparametric Stan model
data3<- list(N=n, y=y, a=-10, b=10)
fit3 <- stan(file="biparametric2.stan", data = data3, chains = 4, iter=2000,
refresh=-1)
#extract stan output for biparametric model
sim3 <- extract(fit3)
posterior_biv <- as.matrix(fit3)
theta_est <- mean(sim3$theta)
sigma_est <- mean(sim3$sigma)
c(theta_est, sigma_est)
traceplot(fit3, pars=c("theta", "sigma"))
plot_title <- ggtitle("Posterior distributions",
"with medians and 80% intervals")
mcmc_areas(posterior_biv,
pars = c("theta","sigma"),
prob = 0.8) + plot_title
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/Magistrale/Statistical Methods for Data Science/Laboratorio/LAB3")
library("bayesplot")
library("rstanarm")
library("ggplot2")
library("rstan")
#input values
#true mean
theta_sample <- 2
#likelihood variance
sigma2 <- 2
#sample size
n <- 10
#generate some data
set.seed(123)
y <- rnorm(n,theta_sample, sqrt(sigma2))
#launch biparametric Stan model
data3<- list(N=n, y=y, a=-10, b=10)
fit3 <- stan(file="biparametric.stan", data = data3, chains = 4, iter=2000,
refresh=-1)
#extract stan output for biparametric model
sim3 <- extract(fit3)
posterior_biv <- as.matrix(fit3)
theta_est <- mean(sim3$theta)
sigma_est <- mean(sim3$sigma)
c(theta_est, sigma_est)
traceplot(fit3, pars=c("theta", "sigma"))
plot_title <- ggtitle("Posterior distributions",
"with medians and 80% intervals")
mcmc_areas(posterior_biv,
pars = c("theta","sigma"),
prob = 0.8) + plot_title
x = seq(0,5, length=1000)
plot(x, dcauchy(x, 0, 2.5), ylab="density", type ="l", lwd=1, col=4)
x = seq(0,8, length=1000)
plot(x, dcauchy(x, 0, 2.5), ylab="density", type ="l", lwd=1, col=4)
x = seq(0,15, length=1000)
plot(x, dcauchy(x, 0, 2.5), ylab="density", type ="l", lwd=1, col=4)
x = seq(0,5, length=1000)
plot(x, dcauchy(x, 0, 2.5), ylab="density", type ="l", lwd=1, col=4)
x = seq(0,5, length=1000)
plot(x, dcauchy(x, 0, 2.5), ylab="density", type ="l", ylim=c(0,0.5), lwd=1, col=4)
x = seq(0,5, length=1000)
plot(x, dcauchy(x, 0, 2.5), ylab="density", type ="l", ylim=c(0,0.13), lwd=1, col=4)
x = seq(0,5, length=1000)
plot(x, dcauchy(x, 0, 2.5), ylab="density", type ="l", ylim=c(0,0.13), lwd=1, col=4)
plot(x, dunif(x, 0.1, 10), ylab="density", type ="l", ylim=c(0,0.13), lwd=1, col=4)
x = seq(0,8, length=1000)
plot(x, dcauchy(x, 0, 2.5), ylab="density", type ="l", ylim=c(0,0.13), lwd=1, col=4)
x = seq(0,8, length=1000)
plot(x, dunif(x, 0.1, 10), ylab="density", type ="l", ylim=c(0,0.13), lwd=1, col=4)
x = seq(0,8, length=1000)
plot(x, dcauchy(x, 0, 2.5), ylab="density", type ="l", ylim=c(0,0.13), lwd=1, col=4)
x = seq(0.1,10, length=1000)
plot(x, dunif(x, 0.1, 10), ylab="density", type ="l", ylim=c(0,0.13), lwd=1, col=4)
x = seq(0,8, length=1000)
plot(x, dcauchy(x, 0, 2.5), ylab="density", type ="l", ylim=c(0,0.13), lwd=1, col=4)
x = seq(0,10.1, length=1000)
plot(x, dunif(x, 0.1, 10), ylab="density", type ="l", ylim=c(0,0.13), lwd=1, col=4)
x = seq(0,8, length=1000)
plot(x, dcauchy(x, 0, 2.5), ylab="density", type ="l", ylim=c(0,0.13), lwd=1, col=4)
x = seq(0,10, length=1000)
curve(x, dcauchy(x, 0, 2.5), ylab="density", type ="l", ylim=c(0,0.13), lwd=1, col=4)
curve(x, dunif(x, 0.1, 10), ylab="density", type ="l", ylim=c(0,0.13), lwd=1, col=4)
x = seq(0,10, length=1000)
curve(dcauchy(x, 0, 2.5), ylab="density", type ="l", ylim=c(0,0.13), lwd=1, col=4)
curve(dunif(x, 0.1, 10), ylab="density", type ="l", ylim=c(0,0.13), lwd=1, col=4)
x = seq(0,10, length=1000)
curve(dcauchy(x, 0, 2.5), ylab="density", type ="l", ylim=c(0,0.13), lwd=1, col=2)
curve(dunif(x, 0.1, 10), ylab="density", type ="l", ylim=c(0,0.13), lwd=1, col=4)
curve(dcauchy(x, 0, 2.5), ylab="density", type ="l", ylim=c(0,0.13), lwd=1, col=2)
curve(dcauchy(x, 0, 2.5), xlim=c(0,10), ylab="density", type ="l", ylim=c(0,0.13), lwd=1, col=2)
curve(dunif(x, 0.1, 10), xlim=c(0,10), ylab="density", type ="l", ylim=c(0,0.13), lwd=1, col=4)
curve(dcauchy(x, 0, 2.5), xlim=c(0,10), ylab="density", type ="l", ylim=c(0,0.13), lwd=1, col=2)
curve(dunif(x, 0.1, 10), xlim=c(0,10.1), ylab="density", type ="l", ylim=c(0,0.13), lwd=1, col=4)
curve(dcauchy(x, 0, 2.5), xlim=c(0,10), ylab="density", type ="l", ylim=c(0,0.13), lwd=1, col=2)
curve(dunif(x, 0.1, 10), xlim=c(0,10.1), ylab="density", type ="l", ylim=c(0,0.13), lwd=1, col=4)
curve(dcauchy(x, 0, 2.5), xlim=c(0,10), ylab="density", type ="l", ylim=c(0,0.13), lwd=1, col=2)
curve(dunif(x, 0.1, 10), xlim=c(0,10.1), ylab="density", type ="l", ylim=c(0,0.13), lwd=1, col=4, add =T)
curve(dcauchy(x, 0, 2.5), xlim=c(0,10.5), ylab="density", type ="l", ylim=c(0,0.13), lwd=1, col=2)
curve(dunif(x, 0.1, 10), xlim=c(0,10.5), ylab="density", type ="l", ylim=c(0,0.13), lwd=1, col=4, add =T)
curve(dcauchy(x, 0, 2.5), xlim=c(0,10.1), ylab="density", type ="l", ylim=c(0,0.13), lwd=1, col=2)
curve(dunif(x, 0.1, 10), xlim=c(0,10.1), ylab="density", type ="l", ylim=c(0,0.13), lwd=1, col=4, add =T)
curve(dcauchy(x, 0, 2.5), xlim=c(-1,11), ylab="density", type ="l", ylim=c(0,0.13), lwd=1, col=2)
curve(dunif(x, 0.1, 10), xlim=c(-1,11), ylab="density", type ="l", ylim=c(0,0.13), lwd=1, col=4, add =T)
curve(dcauchy(x, 0, 2.5), xlim=c(0,11), ylab="density", type ="l", ylim=c(0,0.13), lwd=1, col=2)
curve(dunif(x, 0.1, 10), xlim=c(0,11), ylab="density", type ="l", ylim=c(0,0.13), lwd=1, col=4, add =T)
curve(dcauchy(x, 0, 2.5), xlim=c(0,10), ylab="density", type ="l", ylim=c(0,0.13), lwd=1, col=2)
curve(dunif(x, 0.1, 10), xlim=c(0,10), ylab="density", type ="l", ylim=c(0,0.13), lwd=1, col=4, add =T)
curve(dcauchy(x, 0, 2.5), xlim=c(0,10.1), ylab="density", type ="l", ylim=c(0,0.13), lwd=1, col=2)
curve(dunif(x, 0.1, 10), xlim=c(0,10.1), ylab="density", type ="l", ylim=c(0,0.13), lwd=1, col=4, add =T)
library("bayesplot")
library("rstanarm")
library("ggplot2")
library("rstan")
#input values
#true mean
theta_sample <- 2
#likelihood variance
sigma2 <- 2
#sample size
n <- 10
#generate some data
set.seed(123)
y <- rnorm(n,theta_sample, sqrt(sigma2))
#launch biparametric Stan model
data3<- list(N=n, y=y, a=-10, b=10)
fit3 <- stan(file="biparametric.stan", data = data3, chains = 4, iter=2000,
refresh=-1)
#extract stan output for biparametric model
sim3 <- extract(fit3)
posterior_biv <- as.matrix(fit3)
theta_est <- mean(sim3$theta)
sigma_est <- mean(sim3$sigma)
c(theta_est, sigma_est)
traceplot(fit3, pars=c("theta", "sigma"))
plot_title <- ggtitle("Posterior distributions",
"with medians and 80% intervals")
mcmc_areas(posterior_biv,
pars = c("theta","sigma"),
prob = 0.8) + plot_title
install.packages("LearnBayes")
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/Magistrale/Statistical Methods for Data Science/Laboratorio/LAB3/SMDS/HW3")
